{"remainingRequest":"/Users/zhangsir/Desktop/ymyu/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangsir/Desktop/ymyu/src/components/comments.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhangsir/Desktop/ymyu/src/components/comments.vue","mtime":1592641032488},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  getSongComment,\n  getPlaylistComment,\n  getHotComment,\n  getMvComment\n} from \"@/api\"\nimport { getPageOffset, scrollInto } from \"@/utils\"\nimport Comment from \"./comment\"\n\nconst SONG_TYPE = \"song\"\nconst PLAYLIST_TYPE = \"playlist\"\nconst MV_TYPE = \"mv\"\n\nconst PAGE_SIZE = 20\nexport default {\n  props: {\n    id: {\n      type: Number,\n      required: true\n    },\n    type: {\n      // SONG_TYPE, PLAYLIST_TYPE, MV_TYPE 之一\n      type: String,\n      default: SONG_TYPE\n    }\n  },\n  created() {\n    this.PAGE_SIZE = PAGE_SIZE\n  },\n  data() {\n    return {\n      loading: false,\n      hotComments: [],\n      comments: [],\n      total: 0,\n      currentPage: 1\n    }\n  },\n  methods: {\n    async getComment() {\n      this.loading = true\n      const commentRequestMap = {\n        [PLAYLIST_TYPE]: getPlaylistComment,\n        [SONG_TYPE]: getSongComment,\n        [MV_TYPE]: getMvComment\n      }\n      const commentRequest = commentRequestMap[this.type]\n      const { hotComments = [], comments = [], total } = await commentRequest({\n        id: this.id,\n        pageSize: PAGE_SIZE,\n        offset: getPageOffset(this.currentPage, PAGE_SIZE)\n      }).finally(() => {\n        this.loading = false\n      })\n\n      // 歌单的热评需要单独请求接口获取\n      if (this.type === PLAYLIST_TYPE && this.currentPage === 1) {\n        const { hotComments: exactHotComments = [] } = await getHotComment({\n          id: this.id,\n          type: 2 // 歌单type\n        })\n        this.hotComments = exactHotComments\n      } else {\n        this.hotComments = hotComments\n      }\n\n      this.comments = comments\n      this.total = total\n      this.$emit(\"update\", { comments, hotComments, total })\n    },\n    async onPageChange() {\n      await this.getComment()\n      this.$nextTick(() => {\n        scrollInto(this.$refs.commentTitle)\n      })\n    }\n  },\n  watch: {\n    id: {\n      handler(newId) {\n        if (newId) {\n          this.currentPage = 1\n          this.getComment()\n        }\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    shouldHotCommentShow() {\n      return this.hotComments.length > 0 && this.currentPage === 1\n    },\n    shouldCommentShow() {\n      return this.comments.length > 0\n    }\n  },\n  components: {\n    Comment\n  }\n}\n",{"version":3,"sources":["comments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"comments.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"comment\">\n    <template v-if=\"loading\">\n      <Loading :loading=\"loading\" />\n    </template>\n    <template v-else>\n      <div\n        class=\"block\"\n        v-if=\"shouldHotCommentShow\"\n      >\n        <p class=\"title\">精彩评论</p>\n        <Comment\n          :border=\"!$utils.isLast(index, hotComments)\"\n          :comment=\"comment\"\n          :key=\"comment.id\"\n          v-for=\"(comment, index) in hotComments\"\n        />\n      </div>\n      <div\n        class=\"block\"\n        v-if=\"shouldCommentShow\"\n      >\n        <p\n          class=\"title\"\n          ref=\"commentTitle\"\n        >\n          最新评论\n          <span class=\"count\">({{total}})</span>\n        </p>\n        <Comment\n          :border=\"!$utils.isLast(index, comments)\"\n          :comment=\"comment\"\n          :key=\"comment.id\"\n          v-for=\"(comment,index) in comments\"\n        />\n      </div>\n      <Pagination\n        :current-page.sync=\"currentPage\"\n        :page-size=\"PAGE_SIZE\"\n        :total=\"total\"\n        @current-change=\"onPageChange\"\n        class=\"pagination\"\n      />\n    </template>\n    <empty v-if=\"!loading && !shouldHotCommentShow && !shouldCommentShow\">还没有评论哦~</empty>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\nimport {\n  getSongComment,\n  getPlaylistComment,\n  getHotComment,\n  getMvComment\n} from \"@/api\"\nimport { getPageOffset, scrollInto } from \"@/utils\"\nimport Comment from \"./comment\"\n\nconst SONG_TYPE = \"song\"\nconst PLAYLIST_TYPE = \"playlist\"\nconst MV_TYPE = \"mv\"\n\nconst PAGE_SIZE = 20\nexport default {\n  props: {\n    id: {\n      type: Number,\n      required: true\n    },\n    type: {\n      // SONG_TYPE, PLAYLIST_TYPE, MV_TYPE 之一\n      type: String,\n      default: SONG_TYPE\n    }\n  },\n  created() {\n    this.PAGE_SIZE = PAGE_SIZE\n  },\n  data() {\n    return {\n      loading: false,\n      hotComments: [],\n      comments: [],\n      total: 0,\n      currentPage: 1\n    }\n  },\n  methods: {\n    async getComment() {\n      this.loading = true\n      const commentRequestMap = {\n        [PLAYLIST_TYPE]: getPlaylistComment,\n        [SONG_TYPE]: getSongComment,\n        [MV_TYPE]: getMvComment\n      }\n      const commentRequest = commentRequestMap[this.type]\n      const { hotComments = [], comments = [], total } = await commentRequest({\n        id: this.id,\n        pageSize: PAGE_SIZE,\n        offset: getPageOffset(this.currentPage, PAGE_SIZE)\n      }).finally(() => {\n        this.loading = false\n      })\n\n      // 歌单的热评需要单独请求接口获取\n      if (this.type === PLAYLIST_TYPE && this.currentPage === 1) {\n        const { hotComments: exactHotComments = [] } = await getHotComment({\n          id: this.id,\n          type: 2 // 歌单type\n        })\n        this.hotComments = exactHotComments\n      } else {\n        this.hotComments = hotComments\n      }\n\n      this.comments = comments\n      this.total = total\n      this.$emit(\"update\", { comments, hotComments, total })\n    },\n    async onPageChange() {\n      await this.getComment()\n      this.$nextTick(() => {\n        scrollInto(this.$refs.commentTitle)\n      })\n    }\n  },\n  watch: {\n    id: {\n      handler(newId) {\n        if (newId) {\n          this.currentPage = 1\n          this.getComment()\n        }\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    shouldHotCommentShow() {\n      return this.hotComments.length > 0 && this.currentPage === 1\n    },\n    shouldCommentShow() {\n      return this.comments.length > 0\n    }\n  },\n  components: {\n    Comment\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.block {\n  margin-bottom: 48px;\n\n  .title {\n    font-size: $font-size-lg;\n    font-weight: $font-weight-bold;\n    margin-bottom: 4px;\n\n    .count {\n      font-size: $font-size;\n    }\n  }\n}\n\n.pagination {\n  text-align: right;\n}\n</style>\n"]}]}