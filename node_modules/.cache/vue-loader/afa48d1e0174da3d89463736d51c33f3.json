{"remainingRequest":"/Users/zhangsir/Desktop/muise/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangsir/Desktop/muise/src/base/highlight-text.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhangsir/Desktop/muise/src/base/highlight-text.vue","mtime":1592641032486},{"path":"/Users/zhangsir/Desktop/muise/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/muise/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/muise/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/muise/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nexport default {\n  name: \"HighlightText\",\n  props: [\"text\", \"highlightText\"],\n  methods: {\n    genHighlight() {\n      if (!this.highlightText) {\n        return <span>{this.text}</span>\n      }\n      const titleToMatch = this.text.toLowerCase()\n      const keyWord = this.highlightText.toLowerCase()\n      const matchIndex = titleToMatch.indexOf(keyWord)\n      const beforeStr = this.text.substr(0, matchIndex)\n      const afterStr = this.text.substr(matchIndex + keyWord.length)\n      const hitStr = this.text.substr(matchIndex, keyWord.length)\n      const titleSpan =\n        matchIndex > -1 ? (\n          <span>\n            {beforeStr}\n            <span class=\"high-light-text\">{hitStr}</span>\n            {afterStr}\n          </span>\n        ) : (\n          this.text\n        )\n      return <span>{titleSpan}</span>\n    }\n  },\n  render() {\n    return this.genHighlight()\n  }\n}\n",{"version":3,"sources":["highlight-text.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"highlight-text.vue","sourceRoot":"src/base","sourcesContent":["<script type=\"text/ecmascript-6\">\nexport default {\n  name: \"HighlightText\",\n  props: [\"text\", \"highlightText\"],\n  methods: {\n    genHighlight() {\n      if (!this.highlightText) {\n        return <span>{this.text}</span>\n      }\n      const titleToMatch = this.text.toLowerCase()\n      const keyWord = this.highlightText.toLowerCase()\n      const matchIndex = titleToMatch.indexOf(keyWord)\n      const beforeStr = this.text.substr(0, matchIndex)\n      const afterStr = this.text.substr(matchIndex + keyWord.length)\n      const hitStr = this.text.substr(matchIndex, keyWord.length)\n      const titleSpan =\n        matchIndex > -1 ? (\n          <span>\n            {beforeStr}\n            <span class=\"high-light-text\">{hitStr}</span>\n            {afterStr}\n          </span>\n        ) : (\n          this.text\n        )\n      return <span>{titleSpan}</span>\n    }\n  },\n  render() {\n    return this.genHighlight()\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.high-light-text {\n  color: $blue;\n}\n</style>\n"]}]}