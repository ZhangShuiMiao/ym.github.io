{"remainingRequest":"/Users/zhangsir/Desktop/ymyu/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangsir/Desktop/ymyu/src/components/mini-player.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhangsir/Desktop/ymyu/src/components/mini-player.vue","mtime":1592641032488},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  mapState,\n  mapMutations,\n  mapGetters,\n  mapActions\n} from \"@/store/helper/music\"\nimport Storage from \"good-storage\"\nimport Share from \"@/components/share\"\nimport { VOLUME_KEY, playModeMap, isDef } from \"@/utils\"\n\nconst DEFAULT_VOLUME = 0.75\nexport default {\n  data() {\n    return {\n      isPlayErrorPromptShow: false,\n      songReady: false,\n      volume: Storage.get(VOLUME_KEY, DEFAULT_VOLUME)\n    }\n  },\n  mounted() {\n    this.audio.volume = this.volume\n  },\n  methods: {\n    togglePlaying() {\n      if (!this.currentSong.id) {\n        return\n      }\n      this.setPlayingState(!this.playing)\n    },\n    ready() {\n      this.songReady = true\n    },\n    async play() {\n      if (this.songReady) {\n        try {\n          await this.audio.play()\n          if (this.isPlayErrorPromptShow) {\n            this.isPlayErrorPromptShow = false\n          }\n        } catch (error) {\n          // 提示用户手动播放\n          this.isPlayErrorPromptShow = true\n          this.setPlayingState(false)\n        }\n      }\n    },\n    pause() {\n      this.audio.pause()\n    },\n    updateTime(e) {\n      const time = e.target.currentTime\n      this.setCurrentTime(time)\n    },\n    prev() {\n      if (this.songReady) {\n        this.startSong(this.prevSong)\n      }\n    },\n    next() {\n      if (this.songReady) {\n        this.startSong(this.nextSong)\n      }\n    },\n    end() {\n      this.next()\n    },\n    onProgressChange(percent) {\n      this.audio.currentTime = this.currentSong.durationSecond * percent\n      this.setPlayingState(true)\n    },\n    onVolumeChange(percent) {\n      this.audio.volume = percent\n      Storage.set(VOLUME_KEY, percent)\n    },\n    onChangePlayMode() {\n      const modeKeys = Object.keys(playModeMap)\n      const currentModeIndex = modeKeys.findIndex(\n        key => playModeMap[key].code === this.playMode\n      )\n      const nextIndex = (currentModeIndex + 1) % modeKeys.length\n      const nextModeKey = modeKeys[nextIndex]\n      const nextMode = playModeMap[nextModeKey]\n      this.setPlayMode(nextMode.code)\n    },\n    togglePlaylistShow() {\n      this.setPlaylistShow(!this.isPlaylistShow)\n    },\n    togglePlayerShow() {\n      this.setPlayerShow(!this.isPlayerShow)\n    },\n    goGitHub() {\n      window.open(\"https://github.com/sl1673495/vue-netease-music\")\n    },\n\n    ...mapMutations([\n      \"setCurrentTime\",\n      \"setPlayingState\",\n      \"setPlayMode\",\n      \"setPlaylistShow\",\n      \"setPlayerShow\"\n    ]),\n    ...mapActions([\"startSong\"])\n  },\n  watch: {\n    currentSong(newSong, oldSong) {\n      // 清空了歌曲\n      if (!newSong.id) {\n        this.audio.pause()\n        this.audio.currentTime = 0\n        return\n      }\n      // 单曲循环\n      if (oldSong && newSong.id === oldSong.id) {\n        this.setCurrentTime(0)\n        this.audio.currentTime = 0\n        this.play()\n        return\n      }\n      this.songReady = false\n      if (this.timer) {\n        clearTimeout(this.timer)\n      }\n      this.timer = setTimeout(() => {\n        this.play()\n      }, 1000)\n    },\n    playing(newPlaying) {\n      this.$nextTick(() => {\n        newPlaying ? this.play() : this.pause()\n      })\n    }\n  },\n  computed: {\n    hasCurrentSong() {\n      return isDef(this.currentSong.id)\n    },\n    playIcon() {\n      return this.playing ? \"pause\" : \"play\"\n    },\n    currentMode() {\n      return playModeMap[this.playMode]\n    },\n    modeIcon() {\n      return this.currentMode.icon\n    },\n    playModeText() {\n      return this.currentMode.name\n    },\n    audio() {\n      return this.$refs.audio\n    },\n    // 播放的进度百分比\n    playedPercent() {\n      const { durationSecond } = this.currentSong\n      return Math.min(this.currentTime / durationSecond, 1) || 0\n    },\n    playControlIcon() {\n      return this.isPlayerShow ? \"shrink\" : \"open\"\n    },\n    shareUrl() {\n      return `${window.location.origin}?shareMusicId=${this.currentSong.id}`\n    },\n    ...mapState([\n      \"currentSong\",\n      \"currentTime\",\n      \"playing\",\n      \"playMode\",\n      \"isPlaylistShow\",\n      \"isPlaylistPromptShow\",\n      \"isPlayerShow\"\n    ]),\n    ...mapGetters([\"prevSong\", \"nextSong\"])\n  },\n  components: { Share }\n}\n",{"version":3,"sources":["mini-player.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"mini-player.vue","sourceRoot":"src/components","sourcesContent":["// 底部播放栏组件\n<template>\n  <div class=\"mini-player\" id=\"mini-player\">\n    <!-- 歌曲内容 -->\n    <div class=\"song\">\n      <template v-if=\"hasCurrentSong\">\n        <div @click=\"togglePlayerShow\" class=\"img-wrap\">\n          <div class=\"mask\"></div>\n          <img v-lazy=\"$utils.genImgUrl(currentSong.img, 80)\" class=\"blur\" />\n          <div class=\"player-control\">\n            <Icon :size=\"24\" :type=\"playControlIcon\" color=\"white\" />\n          </div>\n        </div>\n        <div class=\"content\">\n          <div class=\"top\">\n            <p class=\"name\">{{ currentSong.name }}</p>\n            <p class=\"split\">-</p>\n            <p class=\"artists\">{{ currentSong.artistsText }}</p>\n          </div>\n          <div class=\"time\">\n            <span class=\"played-time\">{{\n              $utils.formatTime(currentTime)\n            }}</span>\n            <span class=\"split\">/</span>\n            <span class=\"total-time\">{{\n              $utils.formatTime(currentSong.duration / 1000)\n            }}</span>\n          </div>\n        </div>\n      </template>\n    </div>\n    <!-- 控制台 -->\n    <div class=\"control\">\n      <Icon :size=\"24\" @click=\"prev\" class=\"icon\" type=\"prev\" />\n      <el-popover\n        :value=\"isPlayErrorPromptShow\"\n        placement=\"top\"\n        trigger=\"manual\"\n        width=\"160\"\n      >\n        <p>请点击开始播放。</p>\n        <div @click=\"togglePlaying\" class=\"play-icon\" slot=\"reference\">\n          <Icon :size=\"24\" :type=\"playIcon\" />\n        </div>\n      </el-popover>\n\n      <Icon :size=\"24\" @click=\"next\" class=\"icon\" type=\"next\" />\n    </div>\n\n    <div class=\"mode\">\n      <Share :shareUrl=\"shareUrl\" class=\"mode-item\" v-show=\"hasCurrentSong\" />\n\n      <!-- 模式 -->\n      <el-popover placement=\"top\" trigger=\"hover\" width=\"160\">\n        <p>{{ playModeText }}</p>\n        <Icon\n          :size=\"20\"\n          :type=\"modeIcon\"\n          @click=\"onChangePlayMode\"\n          class=\"mode-item\"\n          slot=\"reference\"\n        />\n      </el-popover>\n      <!-- 播放列表 -->\n      <el-popover\n        :value=\"isPlaylistPromptShow\"\n        placement=\"top\"\n        trigger=\"manual\"\n        width=\"160\"\n      >\n        <p>已更新歌单</p>\n        <Icon\n          :size=\"20\"\n          @click=\"togglePlaylistShow\"\n          class=\"mode-item\"\n          slot=\"reference\"\n          type=\"playlist\"\n        />\n      </el-popover>\n      <!-- 音量 -->\n      <div class=\"volume-item\">\n        <Volume :volume=\"volume\" @volumeChange=\"onVolumeChange\" />\n      </div>\n      <!-- github -->\n      <Icon :size=\"20\" @click=\"goGitHub\" class=\"mode-item\" type=\"github\" />\n    </div>\n    <div class=\"progress-bar-wrap\">\n      <ProgressBar\n        :disabled=\"!hasCurrentSong\"\n        :percent=\"playedPercent\"\n        @percentChange=\"onProgressChange\"\n      />\n    </div>\n    <audio\n      :src=\"currentSong.url\"\n      @canplay=\"ready\"\n      @ended=\"end\"\n      @timeupdate=\"updateTime\"\n      ref=\"audio\"\n    ></audio>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\nimport {\n  mapState,\n  mapMutations,\n  mapGetters,\n  mapActions\n} from \"@/store/helper/music\"\nimport Storage from \"good-storage\"\nimport Share from \"@/components/share\"\nimport { VOLUME_KEY, playModeMap, isDef } from \"@/utils\"\n\nconst DEFAULT_VOLUME = 0.75\nexport default {\n  data() {\n    return {\n      isPlayErrorPromptShow: false,\n      songReady: false,\n      volume: Storage.get(VOLUME_KEY, DEFAULT_VOLUME)\n    }\n  },\n  mounted() {\n    this.audio.volume = this.volume\n  },\n  methods: {\n    togglePlaying() {\n      if (!this.currentSong.id) {\n        return\n      }\n      this.setPlayingState(!this.playing)\n    },\n    ready() {\n      this.songReady = true\n    },\n    async play() {\n      if (this.songReady) {\n        try {\n          await this.audio.play()\n          if (this.isPlayErrorPromptShow) {\n            this.isPlayErrorPromptShow = false\n          }\n        } catch (error) {\n          // 提示用户手动播放\n          this.isPlayErrorPromptShow = true\n          this.setPlayingState(false)\n        }\n      }\n    },\n    pause() {\n      this.audio.pause()\n    },\n    updateTime(e) {\n      const time = e.target.currentTime\n      this.setCurrentTime(time)\n    },\n    prev() {\n      if (this.songReady) {\n        this.startSong(this.prevSong)\n      }\n    },\n    next() {\n      if (this.songReady) {\n        this.startSong(this.nextSong)\n      }\n    },\n    end() {\n      this.next()\n    },\n    onProgressChange(percent) {\n      this.audio.currentTime = this.currentSong.durationSecond * percent\n      this.setPlayingState(true)\n    },\n    onVolumeChange(percent) {\n      this.audio.volume = percent\n      Storage.set(VOLUME_KEY, percent)\n    },\n    onChangePlayMode() {\n      const modeKeys = Object.keys(playModeMap)\n      const currentModeIndex = modeKeys.findIndex(\n        key => playModeMap[key].code === this.playMode\n      )\n      const nextIndex = (currentModeIndex + 1) % modeKeys.length\n      const nextModeKey = modeKeys[nextIndex]\n      const nextMode = playModeMap[nextModeKey]\n      this.setPlayMode(nextMode.code)\n    },\n    togglePlaylistShow() {\n      this.setPlaylistShow(!this.isPlaylistShow)\n    },\n    togglePlayerShow() {\n      this.setPlayerShow(!this.isPlayerShow)\n    },\n    goGitHub() {\n      window.open(\"https://github.com/sl1673495/vue-netease-music\")\n    },\n\n    ...mapMutations([\n      \"setCurrentTime\",\n      \"setPlayingState\",\n      \"setPlayMode\",\n      \"setPlaylistShow\",\n      \"setPlayerShow\"\n    ]),\n    ...mapActions([\"startSong\"])\n  },\n  watch: {\n    currentSong(newSong, oldSong) {\n      // 清空了歌曲\n      if (!newSong.id) {\n        this.audio.pause()\n        this.audio.currentTime = 0\n        return\n      }\n      // 单曲循环\n      if (oldSong && newSong.id === oldSong.id) {\n        this.setCurrentTime(0)\n        this.audio.currentTime = 0\n        this.play()\n        return\n      }\n      this.songReady = false\n      if (this.timer) {\n        clearTimeout(this.timer)\n      }\n      this.timer = setTimeout(() => {\n        this.play()\n      }, 1000)\n    },\n    playing(newPlaying) {\n      this.$nextTick(() => {\n        newPlaying ? this.play() : this.pause()\n      })\n    }\n  },\n  computed: {\n    hasCurrentSong() {\n      return isDef(this.currentSong.id)\n    },\n    playIcon() {\n      return this.playing ? \"pause\" : \"play\"\n    },\n    currentMode() {\n      return playModeMap[this.playMode]\n    },\n    modeIcon() {\n      return this.currentMode.icon\n    },\n    playModeText() {\n      return this.currentMode.name\n    },\n    audio() {\n      return this.$refs.audio\n    },\n    // 播放的进度百分比\n    playedPercent() {\n      const { durationSecond } = this.currentSong\n      return Math.min(this.currentTime / durationSecond, 1) || 0\n    },\n    playControlIcon() {\n      return this.isPlayerShow ? \"shrink\" : \"open\"\n    },\n    shareUrl() {\n      return `${window.location.origin}?shareMusicId=${this.currentSong.id}`\n    },\n    ...mapState([\n      \"currentSong\",\n      \"currentTime\",\n      \"playing\",\n      \"playMode\",\n      \"isPlaylistShow\",\n      \"isPlaylistPromptShow\",\n      \"isPlayerShow\"\n    ]),\n    ...mapGetters([\"prevSong\", \"nextSong\"])\n  },\n  components: { Share }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.mini-player {\n  position: relative;\n  position: fixed;\n  z-index: $mini-player-z-index;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  justify-content: space-between;\n  height: $mini-player-height;\n  padding: 8px 16px;\n  padding-right: 24px;\n  background: var(--body-bgcolor);\n\n  .song {\n    display: flex;\n    flex: 4;\n    overflow: hidden;\n\n    .img-wrap {\n      position: relative;\n      margin-right: 8px;\n      border-radius: 6px;\n      overflow: hidden;\n      cursor: pointer;\n      @include img-wrap(40px);\n\n      img {\n        &.blur {\n          filter: blur(2px);\n        }\n      }\n\n      .player-control {\n        @include abs-center;\n      }\n\n      .mask {\n        @include abs-stretch;\n        background: rgba(0, 0, 0, 0.2);\n      }\n    }\n\n    .content {\n      flex: 1;\n      overflow: hidden;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-around;\n\n      .top {\n        display: flex;\n        align-items: flex-end;\n        white-space: nowrap;\n\n        .name {\n          color: var(--font-color-white);\n          @include text-ellipsis;\n        }\n\n        .split {\n          font-size: $font-size-xs;\n          margin: 0 4px;\n        }\n\n        .artists {\n          font-size: $font-size-xs;\n          @include text-ellipsis;\n        }\n      }\n\n      .time {\n        font-size: $font-size-xs;\n        color: var(--font-color-grey);\n\n        .split {\n          margin: 0 4px;\n        }\n      }\n    }\n  }\n\n  .control {\n    position: absolute;\n    height: 100%;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 200px;\n    @include flex-center();\n\n    .play-icon {\n      @include flex-center();\n      position: relative;\n      width: 45px;\n      height: 45px;\n      margin: 0 16px;\n      border-radius: 50%;\n      background: $theme-color;\n      cursor: pointer;\n\n      i {\n        color: #fff;\n      }\n      .icon-play {\n        transform: translateX(1px);\n      }\n    }\n\n    .icon {\n      color: $theme-color;\n    }\n  }\n\n  .mode {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    flex: 6;\n\n    .mode-item {\n      display: block;\n      margin-right: 16px;\n      width: 22px;\n    }\n\n    .volume-item {\n      margin-right: 22px;\n    }\n  }\n\n  .progress-bar-wrap {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -14px;\n  }\n}\n\n.icon {\n  color: var(--font-color);\n  cursor: pointer;\n}\n</style>\n"]}]}