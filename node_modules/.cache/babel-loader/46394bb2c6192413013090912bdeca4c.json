{"remainingRequest":"/Users/zhangsir/Desktop/ymyu/node_modules/thread-loader/dist/cjs.js!/Users/zhangsir/Desktop/ymyu/node_modules/babel-loader/lib/index.js!/Users/zhangsir/Desktop/ymyu/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhangsir/Desktop/ymyu/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangsir/Desktop/ymyu/src/base/volume.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhangsir/Desktop/ymyu/src/base/volume.vue","mtime":1592641032488},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'Volume',\n  props: {\n    volume: {\n      type: Number,\n      default: 1\n    }\n  },\n  data: function data() {\n    return {\n      volumePercent: this.volume\n    };\n  },\n  methods: {\n    onProgressChange: function onProgressChange(percent) {\n      if (percent < 0.05) {\n        percent = 0;\n      }\n\n      this.volumePercent = percent;\n      this.$emit('volumeChange', percent);\n    },\n    getIconType: function getIconType() {\n      return this.isSilence ? 'silence' : 'horn';\n    },\n    toggleSilence: function toggleSilence() {\n      this.isSilence = !this.isSilence;\n    }\n  },\n  computed: {\n    isSilence: {\n      get: function get() {\n        return this.volumePercent === 0;\n      },\n      set: function set(newSilence) {\n        var target = newSilence ? 0 : this.lastVolume;\n\n        if (newSilence) {\n          this.lastVolume = this.volumePercent;\n        }\n\n        this.volumePercent = target;\n        this.onProgressChange(target);\n      }\n    }\n  }\n};",{"version":3,"sources":["volume.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AADA,GAFA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,KAAA;AADA,KAAA;AAGA,GAZA;AAaA,EAAA,OAAA,EAAA;AACA,IAAA,gBADA,4BACA,OADA,EACA;AACA,UAAA,OAAA,GAAA,IAAA,EAAA;AACA,QAAA,OAAA,GAAA,CAAA;AACA;;AACA,WAAA,aAAA,GAAA,OAAA;AACA,WAAA,KAAA,CAAA,cAAA,EAAA,OAAA;AACA,KAPA;AAQA,IAAA,WARA,yBAQA;AACA,aAAA,KAAA,SAAA,GAAA,SAAA,GAAA,MAAA;AACA,KAVA;AAWA,IAAA,aAXA,2BAWA;AACA,WAAA,SAAA,GAAA,CAAA,KAAA,SAAA;AACA;AAbA,GAbA;AA4BA,EAAA,QAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,eAAA,KAAA,aAAA,KAAA,CAAA;AACA,OAHA;AAIA,MAAA,GAJA,eAIA,UAJA,EAIA;AACA,YAAA,MAAA,GAAA,UAAA,GAAA,CAAA,GAAA,KAAA,UAAA;;AACA,YAAA,UAAA,EAAA;AACA,eAAA,UAAA,GAAA,KAAA,aAAA;AACA;;AACA,aAAA,aAAA,GAAA,MAAA;AACA,aAAA,gBAAA,CAAA,MAAA;AACA;AAXA;AADA;AA5BA,CAAA","sourcesContent":["<template>\n  <div class=\"volume\">\n    <Icon\n      :size=\"20\"\n      :type=\"getIconType()\"\n      @click=\"toggleSilence\"\n      class=\"icon\"\n    />\n    <div class=\"progress-wrap\">\n      <ProgressBar\n        :percent=\"volumePercent\"\n        @percentChange=\"onProgressChange\"\n        alwaysShowBtn\n      />\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\nexport default {\n  name: 'Volume',\n  props: {\n    volume: {\n      type: Number,\n      default: 1,\n    }\n  },\n  data() {\n    return {\n      volumePercent: this.volume\n    }\n  },\n  methods: {\n    onProgressChange(percent) {\n      if (percent < 0.05) {\n        percent = 0\n      }\n      this.volumePercent = percent\n      this.$emit('volumeChange', percent)\n    },\n    getIconType() {\n      return this.isSilence ? 'silence' : 'horn'\n    },\n    toggleSilence() {\n      this.isSilence = !this.isSilence\n    }\n  },\n  computed: {\n    isSilence: {\n      get() {\n        return this.volumePercent === 0\n      },\n      set(newSilence) {\n        const target = newSilence ? 0 : this.lastVolume\n        if (newSilence) {\n          this.lastVolume = this.volumePercent\n        }\n        this.volumePercent = target\n        this.onProgressChange(target)\n      }\n    }\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.volume {\n  display: flex;\n  align-items: center;\n  width: 150px;\n\n  .icon {\n    color: var(--font-color);\n    cursor: pointer;\n    margin-right: 8px;\n  }\n  .progress-wrap {\n    flex: 1;\n  }\n}\n</style>\n"],"sourceRoot":"src/base"}]}