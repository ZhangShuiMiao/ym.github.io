{"remainingRequest":"/Users/zhangsir/Desktop/ymyu/node_modules/thread-loader/dist/cjs.js!/Users/zhangsir/Desktop/ymyu/node_modules/babel-loader/lib/index.js!/Users/zhangsir/Desktop/ymyu/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhangsir/Desktop/ymyu/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangsir/Desktop/ymyu/src/components/player.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhangsir/Desktop/ymyu/src/components/player.vue","mtime":1592641032489},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport _slicedToArray from \"/Users/zhangsir/Desktop/ymyu/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/zhangsir/Desktop/ymyu/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/zhangsir/Desktop/ymyu/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getLyric, getSimiSongs, getSimiPlaylists } from \"@/api\";\nimport lyricParser from \"@/utils/lrcparse\";\nimport { debounce, isDef, createSong, goMvWithCheck } from \"@/utils\";\nimport Comments from \"@/components/comments\";\nimport { mapState, mapMutations, mapActions, mapGetters } from \"@/store/helper/music\";\nvar WHEEL_TYPE = \"wheel\";\nvar SCROLL_TYPE = \"scroll\"; // 恢复自动滚动的定时器时间\n\nvar AUTO_SCROLL_RECOVER_TIME = 1000;\nexport default {\n  created: function created() {\n    var _this$lyricScrolling, _this$lyricTimer;\n\n    this.lyricScrolling = (_this$lyricScrolling = {}, _defineProperty(_this$lyricScrolling, WHEEL_TYPE, false), _defineProperty(_this$lyricScrolling, SCROLL_TYPE, false), _this$lyricScrolling);\n    this.lyricTimer = (_this$lyricTimer = {}, _defineProperty(_this$lyricTimer, WHEEL_TYPE, null), _defineProperty(_this$lyricTimer, SCROLL_TYPE, null), _this$lyricTimer);\n  },\n  data: function data() {\n    return {\n      lyric: [],\n      tlyric: [],\n      simiLoading: false,\n      simiPlaylists: [],\n      simiSongs: [],\n      nolyric: false\n    };\n  },\n  methods: _objectSpread({\n    updateSong: function () {\n      var _updateSong = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.updateLyric();\n                this.updateSimi();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function updateSong() {\n        return _updateSong.apply(this, arguments);\n      }\n\n      return updateSong;\n    }(),\n    updateLyric: function () {\n      var _updateLyric = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var result, _lyricParser, lyric, tlyric;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getLyric(this.currentSong.id);\n\n              case 2:\n                result = _context2.sent;\n                this.nolyric = !isDef(result.lrc) || !result.lrc.lyric;\n\n                if (!this.nolyric) {\n                  _lyricParser = lyricParser(result), lyric = _lyricParser.lyric, tlyric = _lyricParser.tlyric;\n                  this.lyric = lyric;\n                  this.tlyric = tlyric;\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateLyric() {\n        return _updateLyric.apply(this, arguments);\n      }\n\n      return updateLyric;\n    }(),\n    updateSimi: function () {\n      var _updateSimi = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _this = this;\n\n        var _ref, _ref2, simiPlaylists, simiSongs;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.simiLoading = true;\n                _context3.next = 3;\n                return Promise.all([getSimiPlaylists(this.currentSong.id), getSimiSongs(this.currentSong.id)]).finally(function () {\n                  _this.simiLoading = false;\n                });\n\n              case 3:\n                _ref = _context3.sent;\n                _ref2 = _slicedToArray(_ref, 2);\n                simiPlaylists = _ref2[0];\n                simiSongs = _ref2[1];\n                this.simiPlaylists = simiPlaylists.playlists;\n                this.simiSongs = simiSongs.songs.map(function (song) {\n                  var id = song.id,\n                      name = song.name,\n                      artists = song.artists,\n                      mvid = song.mvid,\n                      picUrl = song.album.picUrl,\n                      duration = song.duration;\n                  return createSong({\n                    id: id,\n                    name: name,\n                    artists: artists,\n                    duration: duration,\n                    img: picUrl,\n                    mvId: mvid\n                  });\n                });\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateSimi() {\n        return _updateSimi.apply(this, arguments);\n      }\n\n      return updateSimi;\n    }(),\n    getPlayerShowCls: function getPlayerShowCls() {\n      return this.isPlayerShow ? \"show\" : \"hide\";\n    },\n    getActiveCls: function getActiveCls(index) {\n      return this.activeLyricIndex === index ? \"active\" : \"\";\n    },\n    getDiscRotateCls: function getDiscRotateCls() {\n      return this.playing ? \"rotate\" : \"pause\";\n    },\n    onInitScroller: function onInitScroller(scoller) {\n      var _this2 = this;\n\n      var onScrollStart = function onScrollStart(type) {\n        _this2.clearTimer(type);\n\n        _this2.lyricScrolling[type] = true;\n      };\n\n      var onScrollEnd = function onScrollEnd(type) {\n        // 滚动结束后两秒 歌词开始自动滚动\n        _this2.clearTimer(type);\n\n        _this2.lyricTimer[type] = setTimeout(function () {\n          _this2.lyricScrolling[type] = false;\n        }, AUTO_SCROLL_RECOVER_TIME);\n      };\n\n      scoller.on(\"scrollStart\", onScrollStart.bind(null, SCROLL_TYPE));\n      scoller.on(\"mousewheelStart\", onScrollStart.bind(null, WHEEL_TYPE));\n      scoller.on(\"scrollEnd\", onScrollEnd.bind(null, SCROLL_TYPE));\n      scoller.on(\"mousewheelEnd\", onScrollEnd.bind(null, WHEEL_TYPE));\n    },\n    scrollToActiveLyric: function scrollToActiveLyric() {\n      if (this.activeLyricIndex !== -1) {\n        var _this$$refs = this.$refs,\n            scroller = _this$$refs.scroller,\n            lyric = _this$$refs.lyric;\n\n        if (lyric && lyric[this.activeLyricIndex]) {\n          scroller.getScroller().scrollToElement(lyric[this.activeLyricIndex], 200, 0, true);\n        }\n      }\n    },\n    clearTimer: function clearTimer(type) {\n      this.lyricTimer[type] && clearTimeout(this.lyricTimer[type]);\n    },\n    onClickPlaylist: function onClickPlaylist(id) {\n      // 点击的歌单和当前打开的个单页是同一个 直接关闭player\n      if (id === Number(this.$route.params.id)) {\n        this.setPlayerShow(false);\n      } else {\n        this.$router.push(\"/playlist/\".concat(id));\n      }\n    },\n    onClickSong: function onClickSong(song) {\n      this.startSong(song);\n      this.addToPlaylist(song);\n    },\n    onGoMv: function onGoMv() {\n      this.setPlayerShow(false);\n      goMvWithCheck(this.currentSong.mvId);\n    },\n    resizeScroller: debounce(function () {\n      this.$refs.scroller.getScroller().refresh();\n    }, 500),\n    addResizeListener: function addResizeListener() {\n      window.addEventListener(\"resize\", this.resizeScroller);\n    },\n    removeResizeListener: function removeResizeListener() {\n      window.removeEventListener(\"resize\", this.resizeScroller);\n    }\n  }, mapMutations([\"setPlayerShow\"]), {}, mapActions([\"startSong\", \"addToPlaylist\"])),\n  computed: _objectSpread({\n    activeLyricIndex: function activeLyricIndex() {\n      var _this3 = this;\n\n      return this.lyricWithTranslation ? this.lyricWithTranslation.findIndex(function (l, index) {\n        var nextLyric = _this3.lyricWithTranslation[index + 1];\n        return _this3.currentTime >= l.time && (nextLyric ? _this3.currentTime < nextLyric.time : true);\n      }) : -1;\n    },\n    lyricWithTranslation: function lyricWithTranslation() {\n      var _this4 = this;\n\n      var ret = []; // 空内容的去除\n\n      var lyricFiltered = this.lyric.filter(function (_ref3) {\n        var content = _ref3.content;\n        return Boolean(content);\n      }); // content统一转换数组形式\n\n      if (lyricFiltered.length) {\n        lyricFiltered.forEach(function (l) {\n          var time = l.time,\n              content = l.content;\n          var lyricItem = {\n            time: time,\n            content: content,\n            contents: [content]\n          };\n\n          var sameTimeTLyric = _this4.tlyric.find(function (_ref4) {\n            var tLyricTime = _ref4.time;\n            return tLyricTime === time;\n          });\n\n          if (sameTimeTLyric) {\n            var tLyricContent = sameTimeTLyric.content;\n\n            if (content) {\n              lyricItem.contents.push(tLyricContent);\n            }\n          }\n\n          ret.push(lyricItem);\n        });\n      } else {\n        ret = lyricFiltered.map(function (_ref5) {\n          var time = _ref5.time,\n              content = _ref5.content;\n          return {\n            time: time,\n            content: content,\n            contents: [content]\n          };\n        });\n      }\n\n      return ret;\n    }\n  }, mapState([\"currentSong\", \"currentTime\", \"playing\", \"isPlayerShow\"]), {}, mapGetters([\"hasCurrentSong\"])),\n  watch: {\n    isPlayerShow: function isPlayerShow(show) {\n      var _this5 = this;\n\n      if (show) {\n        // 歌词短期内不会变化 所以只拉取相似信息\n        this.updateSimi();\n        this.addResizeListener();\n        this.$nextTick(function () {\n          _this5.scrollToActiveLyric();\n        });\n      } else {\n        this.removeResizeListener();\n      }\n    },\n    currentSong: function currentSong(newSong, oldSong) {\n      if (!newSong.id) {\n        this.setPlayerShow(false);\n        return;\n      }\n\n      if (newSong.id === oldSong.id) {\n        return;\n      } // 如果歌曲详情显示状态切歌 需要拉取歌曲相关信息\n\n\n      if (this.isPlayerShow) {\n        this.updateSong();\n      } else {\n        // 否则只是更新歌词\n        this.updateLyric();\n      }\n    },\n    activeLyricIndex: function activeLyricIndex(newIndex, oldIndex) {\n      if (newIndex !== oldIndex && !this.lyricScrolling[WHEEL_TYPE] && !this.lyricScrolling[SCROLL_TYPE]) {\n        this.scrollToActiveLyric();\n      }\n    },\n    $route: function $route() {\n      this.setPlayerShow(false);\n    }\n  },\n  components: {\n    Comments: Comments\n  }\n};",{"version":3,"sources":["player.vue"],"names":[],"mappings":"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","sourcesContent":["<template >\n  <transition name=\"slide\">\n    <div\n      v-if=\"hasCurrentSong\"\n      :class=\"getPlayerShowCls()\"\n      class=\"player\"\n    >\n      <div class=\"content\">\n        <div class=\"song\">\n          <div class=\"left\">\n            <img\n              class=\"play-bar-support\"\n              src=\"@/assets/image/play-bar-support.png\"\n            />\n            <img\n              :class=\"{playing}\"\n              class=\"play-bar\"\n              src=\"@/assets/image/play-bar.png\"\n            />\n            <div\n              class=\"img-outer-border\"\n              ref=\"disc\"\n            >\n              <div\n                :class=\"{paused: !playing}\"\n                class=\"img-outer\"\n                ref=\"discRotate\"\n              >\n                <div class=\"img-wrap\">\n                  <img v-lazy=\"$utils.genImgUrl(currentSong.img, 400)\" />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"right\">\n            <div class=\"name-wrap\">\n              <p class=\"name\">{{currentSong.name}}</p>\n              <span\n                @click=\"onGoMv\"\n                class=\"mv-tag\"\n                v-if=\"currentSong.mvId\"\n              >MV</span>\n            </div>\n            <div class=\"desc\">\n              <div class=\"desc-item\">\n                <span class=\"label\">歌手：</span>\n                <div class=\"value\">{{currentSong.artistsText}}</div>\n              </div>\n            </div>\n            <empty v-if=\"nolyric\">还没有歌词哦~</empty>\n            <Scroller\n              :data=\"lyric\"\n              :options=\"{disableTouch: true}\"\n              @init=\"onInitScroller\"\n              class=\"lyric-wrap\"\n              ref=\"scroller\"\n              v-else\n            >\n              <div>\n                <div\n                  :class=\"getActiveCls(index)\"\n                  :key=\"index\"\n                  class=\"lyric-item\"\n                  ref=\"lyric\"\n                  v-for=\"(l,index) in lyricWithTranslation\"\n                >\n                  <p\n                    :key=\"contentIndex\"\n                    class=\"lyric-text\"\n                    v-for=\"(content, contentIndex) in l.contents\"\n                  >{{content}}</p>\n                </div>\n              </div>\n            </Scroller>\n          </div>\n        </div>\n        <div class=\"bottom\">\n          <div class=\"left\">\n            <Comments\n              :id=\"currentSong.id\"\n              ref=\"comments\"\n              v-if=\"currentSong.id\"\n            />\n          </div>\n          <div\n            class=\"right\"\n            v-if=\"simiPlaylists.concat(simiSongs).length\"\n          >\n            <Loading\n              :loading=\"simiLoading\"\n              v-if=\"simiLoading\"\n            />\n            <div v-else>\n              <div\n                class=\"simi-playlists\"\n                v-if=\"simiPlaylists.length\"\n              >\n                <p class=\"title\">包含这首歌的歌单</p>\n                <div\n                  :key=\"simiPlaylist.id\"\n                  class=\"simi-item\"\n                  v-for=\"simiPlaylist in simiPlaylists\"\n                >\n                  <Card\n                    :img=\"simiPlaylist.coverImgUrl\"\n                    :name=\"simiPlaylist.name\"\n                    @click=\"onClickPlaylist(simiPlaylist.id)\"\n                  >\n                    <template v-slot:desc>\n                      <div class=\"desc\">\n                        <Icon\n                          :size=\"12\"\n                          color=\"shallow\"\n                          type=\"play\"\n                        />\n                        <p class=\"count\">{{$utils.formatNumber(simiPlaylist.playCount)}}</p>\n                      </div>\n                    </template>\n                  </Card>\n                </div>\n              </div>\n              <div\n                class=\"simi-songs\"\n                v-if=\"simiSongs.length\"\n              >\n                <p class=\"title\">相似歌曲</p>\n                <div\n                  :key=\"simiSong.id\"\n                  class=\"simi-item\"\n                  v-for=\"simiSong in simiSongs\"\n                >\n                  <Card\n                    :desc=\"simiSong.artistsText\"\n                    :img=\"simiSong.img\"\n                    :name=\"simiSong.name\"\n                    @click=\"onClickSong(simiSong)\"\n                  >\n                    <template v-slot:img-mask>\n                      <PlayIcon class=\"play-icon\" />\n                    </template>\n                  </Card>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script type=\"text/ecmascript-6\">\nimport { getLyric, getSimiSongs, getSimiPlaylists } from \"@/api\"\nimport lyricParser from \"@/utils/lrcparse\"\nimport { debounce, isDef, createSong, goMvWithCheck } from \"@/utils\"\nimport Comments from \"@/components/comments\"\nimport { mapState, mapMutations, mapActions, mapGetters } from \"@/store/helper/music\"\n\nconst WHEEL_TYPE = \"wheel\"\nconst SCROLL_TYPE = \"scroll\"\n// 恢复自动滚动的定时器时间\nconst AUTO_SCROLL_RECOVER_TIME = 1000\nexport default {\n  created() {\n    this.lyricScrolling = {\n      [WHEEL_TYPE]: false,\n      [SCROLL_TYPE]: false\n    }\n    this.lyricTimer = {\n      [WHEEL_TYPE]: null,\n      [SCROLL_TYPE]: null\n    }\n  },\n  data() {\n    return {\n      lyric: [],\n      tlyric: [],\n      simiLoading: false,\n      simiPlaylists: [],\n      simiSongs: [],\n      nolyric: false\n    }\n  },\n  methods: {\n    async updateSong() {\n      this.updateLyric()\n      this.updateSimi()\n    },\n    async updateLyric() {\n      const result = await getLyric(this.currentSong.id)\n      this.nolyric = !isDef(result.lrc) || !result.lrc.lyric\n      if (!this.nolyric) {\n        const { lyric, tlyric } = lyricParser(result)\n        this.lyric = lyric\n        this.tlyric = tlyric\n      }\n    },\n    async updateSimi() {\n      this.simiLoading = true\n      const [simiPlaylists, simiSongs] = await Promise.all([\n        getSimiPlaylists(this.currentSong.id),\n        getSimiSongs(this.currentSong.id)\n      ]).finally(() => {\n        this.simiLoading = false\n      })\n      this.simiPlaylists = simiPlaylists.playlists\n      this.simiSongs = simiSongs.songs.map(song => {\n        const {\n          id,\n          name,\n          artists,\n          mvid,\n          album: { picUrl },\n          duration\n        } = song\n        return createSong({\n          id,\n          name,\n          artists,\n          duration,\n          img: picUrl,\n          mvId: mvid\n        })\n      })\n    },\n    getPlayerShowCls() {\n      return this.isPlayerShow ? \"show\" : \"hide\"\n    },\n    getActiveCls(index) {\n      return this.activeLyricIndex === index ? \"active\" : \"\"\n    },\n    getDiscRotateCls() {\n      return this.playing ? \"rotate\" : \"pause\"\n    },\n    onInitScroller(scoller) {\n      const onScrollStart = type => {\n        this.clearTimer(type)\n        this.lyricScrolling[type] = true\n      }\n      const onScrollEnd = type => {\n        // 滚动结束后两秒 歌词开始自动滚动\n        this.clearTimer(type)\n        this.lyricTimer[type] = setTimeout(() => {\n          this.lyricScrolling[type] = false\n        }, AUTO_SCROLL_RECOVER_TIME)\n      }\n      scoller.on(\"scrollStart\", onScrollStart.bind(null, SCROLL_TYPE))\n      scoller.on(\"mousewheelStart\", onScrollStart.bind(null, WHEEL_TYPE))\n\n      scoller.on(\"scrollEnd\", onScrollEnd.bind(null, SCROLL_TYPE))\n      scoller.on(\"mousewheelEnd\", onScrollEnd.bind(null, WHEEL_TYPE))\n    },\n    scrollToActiveLyric() {\n      if (this.activeLyricIndex !== -1) {\n        const { scroller, lyric } = this.$refs\n        if (lyric && lyric[this.activeLyricIndex]) {\n          scroller\n            .getScroller()\n            .scrollToElement(lyric[this.activeLyricIndex], 200, 0, true)\n        }\n      }\n    },\n    clearTimer(type) {\n      this.lyricTimer[type] && clearTimeout(this.lyricTimer[type])\n    },\n    onClickPlaylist(id) {\n      // 点击的歌单和当前打开的个单页是同一个 直接关闭player\n      if (id === Number(this.$route.params.id)) {\n        this.setPlayerShow(false)\n      } else {\n        this.$router.push(`/playlist/${id}`)\n      }\n    },\n    onClickSong(song) {\n      this.startSong(song)\n      this.addToPlaylist(song)\n    },\n    onGoMv() {\n      this.setPlayerShow(false)\n      goMvWithCheck(this.currentSong.mvId)\n    },\n    resizeScroller: debounce(function() {\n      this.$refs.scroller.getScroller().refresh()\n    }, 500),\n    addResizeListener() {\n      window.addEventListener(\"resize\", this.resizeScroller)\n    },\n    removeResizeListener() {\n      window.removeEventListener(\"resize\", this.resizeScroller)\n    },\n    ...mapMutations([\"setPlayerShow\"]),\n    ...mapActions([\"startSong\", \"addToPlaylist\"])\n  },\n  computed: {\n    activeLyricIndex() {\n      return this.lyricWithTranslation\n        ? this.lyricWithTranslation.findIndex((l, index) => {\n            const nextLyric = this.lyricWithTranslation[index + 1]\n            return (\n              this.currentTime >= l.time &&\n              (nextLyric ? this.currentTime < nextLyric.time : true)\n            )\n          })\n        : -1\n    },\n    lyricWithTranslation() {\n      let ret = []\n      // 空内容的去除\n      const lyricFiltered = this.lyric.filter(({ content }) => Boolean(content))\n      // content统一转换数组形式\n      if (lyricFiltered.length) {\n        lyricFiltered.forEach(l => {\n          const { time, content } = l\n          const lyricItem = { time, content, contents: [content] }\n          const sameTimeTLyric = this.tlyric.find(\n            ({ time: tLyricTime }) => tLyricTime === time\n          )\n          if (sameTimeTLyric) {\n            const { content: tLyricContent } = sameTimeTLyric\n            if (content) {\n              lyricItem.contents.push(tLyricContent)\n            }\n          }\n          ret.push(lyricItem)\n        })\n      } else {\n        ret = lyricFiltered.map(({ time, content }) => ({\n          time,\n          content,\n          contents: [content]\n        }))\n      }\n      return ret\n    },\n    ...mapState([\"currentSong\", \"currentTime\", \"playing\", \"isPlayerShow\"]),\n    ...mapGetters([\"hasCurrentSong\"])\n  },\n  watch: {\n    isPlayerShow(show) {\n      if (show) {\n        // 歌词短期内不会变化 所以只拉取相似信息\n        this.updateSimi()\n        this.addResizeListener()\n        this.$nextTick(() => {\n          this.scrollToActiveLyric()\n        })\n      } else {\n        this.removeResizeListener()\n      }\n    },\n    currentSong(newSong, oldSong) {\n      if (!newSong.id) {\n        this.setPlayerShow(false)\n        return\n      }\n      if (newSong.id === oldSong.id) {\n        return\n      }\n      // 如果歌曲详情显示状态切歌 需要拉取歌曲相关信息\n      if (this.isPlayerShow) {\n        this.updateSong()\n      } else {\n        // 否则只是更新歌词\n        this.updateLyric()\n      }\n    },\n    activeLyricIndex(newIndex, oldIndex) {\n      if (\n        newIndex !== oldIndex &&\n        !this.lyricScrolling[WHEEL_TYPE] &&\n        !this.lyricScrolling[SCROLL_TYPE]\n      ) {\n        this.scrollToActiveLyric()\n      }\n    },\n    $route() {\n      this.setPlayerShow(false)\n    }\n  },\n  components: {\n    Comments\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@keyframes rotate {\n  0% {\n    transform: rotate(0);\n  }\n\n  100% {\n    transform: rotate(1turn);\n  }\n}\n\n$img-left-padding: 36px;\n$img-outer-border-d: 320px;\n$img-outer-d: 300px;\n\n.player {\n  position: fixed;\n  top: $header-height;\n  bottom: $mini-player-height;\n  left: 0;\n  right: 0;\n  padding: 0 36px;\n  background: var(--player-bgcolor);\n  z-index: $song-detail-z-index;\n  overflow: hidden;\n  overflow-y: auto;\n  transition: transform 0.5s;\n\n  &.hide {\n    transform: translateY(105%);\n  }\n\n  &.show {\n    transform: none;\n  }\n\n  .content {\n    max-width: 870px;\n    margin: auto;\n\n    .song {\n      display: flex;\n\n      .left {\n        position: relative;\n        padding: 80px 70px 0 $img-left-padding;\n        display: flex;\n        justify-content: center;\n\n        $support-d: 30px;\n        $support-d-half: $support-d / 2;\n        .play-bar-support {\n          position: absolute;\n          left: $img-left-padding + $img-outer-border-d / 2 - $support-d / 2;\n          top: -$support-d-half;\n          width: $support-d;\n          height: $support-d;\n          z-index: 2;\n        }\n\n        .play-bar {\n          $w: 100px;\n          $h: 146px;\n          position: absolute;\n          top: 0;\n          left: $img-left-padding + $img-outer-border-d / 2 - 6px;\n          width: $w;\n          height: $h;\n          z-index: 1;\n          transform-origin: 0 0;\n          transform: rotate(-30deg);\n          transition: all 0.3s;\n\n          &.playing {\n            transform: rotate(5deg);\n          }\n        }\n\n        .img-outer-border {\n          @include round($img-outer-border-d);\n          @include flex-center;\n          background: var(--song-shallow-grey-bg);\n\n          .img-outer {\n            @include round($img-outer-d);\n            @include flex-center;\n            background: $black;\n            background: linear-gradient(-45deg, #333540, #070708, #333540);\n            animation: rotate 20s linear infinite;\n\n            &.paused {\n              animation-play-state: paused;\n            }\n\n            .img-wrap {\n              @include img-wrap(200px);\n\n              img {\n                border-radius: 50%;\n              }\n            }\n          }\n        }\n      }\n\n      .right {\n        flex: 1;\n        padding-top: 45px;\n        .name-wrap {\n          display: flex;\n          align-items: center;\n          margin-bottom: 16px;\n\n          .name {\n            font-size: $font-size-title-lg;\n            color: var(--font-color-white);\n          }\n\n          .mv-tag {\n            display: inline-block;\n            margin-left: 8px;\n            padding: 2px;\n            border: 1px solid currentColor;\n            border-radius: 2px;\n            color: $theme-color;\n            cursor: pointer;\n          }\n        }\n\n        .artists {\n          margin-bottom: 16px;\n        }\n\n        .desc {\n          display: flex;\n          font-size: $font-size-sm;\n          margin-bottom: 30px;\n\n          .desc-item {\n            display: flex;\n            margin-right: 32px;\n            .label {\n              display: inline-block;\n              margin-right: 4px;\n            }\n\n            .value {\n              color: $blue;\n            }\n          }\n        }\n\n        .lyric-wrap {\n          width: 380px;\n          height: 350px;\n          mask-image: linear-gradient(\n            180deg,\n            hsla(0, 0%, 100%, 0) 0,\n            hsla(0, 0%, 100%, 0.6) 15%,\n            #fff 25%,\n            #fff 75%,\n            hsla(0, 0%, 100%, 0.6) 85%,\n            hsla(0, 0%, 100%, 0)\n          );\n\n          .lyric-item {\n            margin-bottom: 16px;\n            font-size: $font-size-sm;\n\n            &.active {\n              font-size: $font-size;\n              color: var(--font-color-white);\n              font-weight: $font-weight-bold;\n            }\n\n            .lyric-text {\n              margin-bottom: 8px;\n            }\n          }\n        }\n      }\n    }\n\n    .bottom {\n      display: flex;\n      margin-top: 48px;\n      margin-bottom: 36px;\n\n      .left {\n        flex: 1;\n      }\n\n      .right {\n        padding-left: 36px;\n        width: 28%;\n        overflow: hidden;\n\n        .simi-playlists {\n          margin-bottom: 36px;\n        }\n\n        .simi-songs {\n          .play-icon {\n            @include abs-center;\n          }\n        }\n\n        .simi-item {\n          margin-bottom: 6px;\n        }\n\n        .title {\n          font-size: $font-size-lg;\n          font-weight: $font-weight-bold;\n          margin-bottom: 12px;\n        }\n\n        .desc {\n          display: flex;\n          align-items: center;\n\n          .count {\n            margin-left: 4px;\n          }\n        }\n      }\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}