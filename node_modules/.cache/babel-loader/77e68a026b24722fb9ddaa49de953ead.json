{"remainingRequest":"/Users/zhangsir/Desktop/ymyu/node_modules/thread-loader/dist/cjs.js!/Users/zhangsir/Desktop/ymyu/node_modules/babel-loader/lib/index.js!/Users/zhangsir/Desktop/ymyu/node_modules/eslint-loader/index.js??ref--13-0!/Users/zhangsir/Desktop/ymyu/src/store/modules/music/actions.js","dependencies":[{"path":"/Users/zhangsir/Desktop/ymyu/src/store/modules/music/actions.js","mtime":1592641032495},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/ymyu/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/zhangsir/Desktop/ymyu/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport storage from 'good-storage';\nimport { PLAY_HISTORY_KEY, getSongImg } from '@/utils';\nexport default {\n  // 整合歌曲信息 并且开始播放\n  startSong: function () {\n    var _startSong = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref, rawSong) {\n      var commit, state, song, playHistory, playHistoryCopy, findedIndex;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit, state = _ref.state;\n              // 浅拷贝一份 改变引用\n              // 1.不污染元数据\n              // 2.单曲循环为了触发watch\n              song = Object.assign({}, rawSong);\n\n              if (song.img) {\n                _context.next = 7;\n                break;\n              }\n\n              if (!song.albumId) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return getSongImg(song.id, song.albumId);\n\n            case 6:\n              song.img = _context.sent;\n\n            case 7:\n              commit('setCurrentSong', song);\n              commit('setPlayingState', true); // 历史记录\n\n              playHistory = state.playHistory;\n              playHistoryCopy = playHistory.slice();\n              findedIndex = playHistoryCopy.findIndex(function (_ref2) {\n                var id = _ref2.id;\n                return song.id === id;\n              });\n\n              if (findedIndex !== -1) {\n                // 删除旧那一项, 插入到最前面\n                playHistoryCopy.splice(findedIndex, 1);\n              }\n\n              playHistoryCopy.unshift(song);\n              commit('setPlayHistory', playHistoryCopy);\n              storage.set(PLAY_HISTORY_KEY, playHistoryCopy);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function startSong(_x, _x2) {\n      return _startSong.apply(this, arguments);\n    }\n\n    return startSong;\n  }(),\n  clearCurrentSong: function clearCurrentSong(_ref3) {\n    var commit = _ref3.commit;\n    commit('setCurrentSong', {});\n    commit('setPlayingState', false);\n    commit('setCurrentTime', 0);\n  },\n  clearPlaylist: function clearPlaylist(_ref4) {\n    var commit = _ref4.commit,\n        dispatch = _ref4.dispatch;\n    commit('setPlaylist', []);\n    dispatch('clearCurrentSong');\n  },\n  clearHistory: function clearHistory(_ref5) {\n    var commit = _ref5.commit;\n    var history = [];\n    commit('setPlayHistory', history);\n    storage.set(PLAY_HISTORY_KEY, history);\n  },\n  addToPlaylist: function addToPlaylist(_ref6, song) {\n    var commit = _ref6.commit,\n        state = _ref6.state;\n    var playlist = state.playlist;\n    var copy = playlist.slice();\n\n    if (!copy.find(function (_ref7) {\n      var id = _ref7.id;\n      return id === song.id;\n    })) {\n      copy.unshift(song);\n      commit('setPlaylist', copy);\n    }\n  }\n};",{"version":3,"sources":["/Users/zhangsir/Desktop/ymyu/src/store/modules/music/actions.js"],"names":["storage","PLAY_HISTORY_KEY","getSongImg","startSong","rawSong","commit","state","song","Object","assign","img","albumId","id","playHistory","playHistoryCopy","slice","findedIndex","findIndex","splice","unshift","set","clearCurrentSong","clearPlaylist","dispatch","clearHistory","history","addToPlaylist","playlist","copy","find"],"mappings":"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","sourcesContent":["import storage from 'good-storage'\nimport { PLAY_HISTORY_KEY,  getSongImg } from '@/utils'\n\nexport default {\n  // 整合歌曲信息 并且开始播放\n  async startSong({ commit, state }, rawSong) {\n    // 浅拷贝一份 改变引用\n    // 1.不污染元数据\n    // 2.单曲循环为了触发watch\n    const song = Object.assign({}, rawSong)\n    if (!song.img) {\n      if (song.albumId) {\n        song.img = await getSongImg(song.id, song.albumId)\n      }\n    }\n    commit('setCurrentSong', song)\n    commit('setPlayingState', true)\n    // 历史记录\n    const { playHistory } = state\n    const playHistoryCopy = playHistory.slice()\n    const findedIndex = playHistoryCopy.findIndex(({ id }) => song.id === id)\n    if (findedIndex !== -1) {\n      // 删除旧那一项, 插入到最前面\n      playHistoryCopy.splice(findedIndex, 1)\n    }\n    playHistoryCopy.unshift(song)\n    commit('setPlayHistory', playHistoryCopy)\n    storage.set(PLAY_HISTORY_KEY, playHistoryCopy)\n  },\n  clearCurrentSong({ commit }) {\n    commit('setCurrentSong', {})\n    commit('setPlayingState', false)\n    commit('setCurrentTime', 0)\n  },\n  clearPlaylist({ commit, dispatch }) {\n    commit('setPlaylist', [])\n    dispatch('clearCurrentSong')\n  },\n  clearHistory({ commit }) {\n    const history = []\n    commit('setPlayHistory', history)\n    storage.set(PLAY_HISTORY_KEY, history)\n  },\n  addToPlaylist({ commit, state }, song) {\n    const { playlist } = state\n    const copy = playlist.slice()\n    if (!copy.find(({ id }) => id === song.id)) {\n      copy.unshift(song)\n      commit('setPlaylist', copy)\n    }\n  }\n}"]}]}