{"remainingRequest":"/Users/zhangsir/Desktop/muise/node_modules/babel-loader/lib/index.js!/Users/zhangsir/Desktop/muise/node_modules/eslint-loader/index.js??ref--13-0!/Users/zhangsir/Desktop/muise/src/utils/lrcparse.js","dependencies":[{"path":"/Users/zhangsir/Desktop/muise/src/utils/lrcparse.js","mtime":1592641032499},{"path":"/Users/zhangsir/Desktop/muise/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/muise/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/muise/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.split\";\nexport default function lyricParser(lrc) {\n  return {\n    'lyric': parseLyric(lrc.lrc.lyric || ''),\n    'tlyric': parseLyric(lrc.tlyric.lyric || ''),\n    'lyricuser': lrc.lyricUser,\n    'transuser': lrc.transUser\n  };\n}\nexport function parseLyric(lrc) {\n  var lyrics = lrc.split('\\n');\n  var lrcObj = [];\n\n  for (var i = 0; i < lyrics.length; i++) {\n    var lyric = decodeURIComponent(lyrics[i]);\n    var timeReg = /\\[\\d*:\\d*((\\.|:)\\d*)*\\]/g;\n    var timeRegExpArr = lyric.match(timeReg);\n    if (!timeRegExpArr) continue;\n    var content = lyric.replace(timeReg, '');\n\n    for (var k = 0, h = timeRegExpArr.length; k < h; k++) {\n      var t = timeRegExpArr[k];\n      var min = Number(String(t.match(/\\[\\d*/i)).slice(1));\n      var sec = Number(String(t.match(/:\\d*/i)).slice(1));\n      var time = min * 60 + sec;\n\n      if (content !== '') {\n        lrcObj.push({\n          time: time,\n          content: content\n        });\n      }\n    }\n  }\n\n  return lrcObj;\n}",{"version":3,"sources":["/Users/zhangsir/Desktop/muise/src/utils/lrcparse.js"],"names":["lyricParser","lrc","parseLyric","lyric","tlyric","lyricUser","transUser","lyrics","split","lrcObj","i","length","decodeURIComponent","timeReg","timeRegExpArr","match","content","replace","k","h","t","min","Number","String","slice","sec","time","push"],"mappings":";;;;AAAA,eAAe,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AACvC,SAAO;AACL,aAASC,UAAU,CAACD,GAAG,CAACA,GAAJ,CAAQE,KAAR,IAAiB,EAAlB,CADd;AAEL,cAAUD,UAAU,CAACD,GAAG,CAACG,MAAJ,CAAWD,KAAX,IAAoB,EAArB,CAFf;AAGL,iBAAaF,GAAG,CAACI,SAHZ;AAIL,iBAAaJ,GAAG,CAACK;AAJZ,GAAP;AAMD;AAED,OAAO,SAASJ,UAAT,CAAoBD,GAApB,EAAyB;AAC9B,MAAMM,MAAM,GAAGN,GAAG,CAACO,KAAJ,CAAU,IAAV,CAAf;AACA,MAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAMP,KAAK,GAAGS,kBAAkB,CAACL,MAAM,CAACG,CAAD,CAAP,CAAhC;AACA,QAAMG,OAAO,GAAG,0BAAhB;AACA,QAAMC,aAAa,GAAGX,KAAK,CAACY,KAAN,CAAYF,OAAZ,CAAtB;AACA,QAAI,CAACC,aAAL,EAAoB;AACpB,QAAME,OAAO,GAAGb,KAAK,CAACc,OAAN,CAAcJ,OAAd,EAAuB,EAAvB,CAAhB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,aAAa,CAACH,MAAlC,EAA0CO,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,UAAME,CAAC,GAAGN,aAAa,CAACI,CAAD,CAAvB;AACA,UAAMG,GAAG,GAAGC,MAAM,CAACC,MAAM,CAACH,CAAC,CAACL,KAAF,CAAQ,QAAR,CAAD,CAAN,CAA0BS,KAA1B,CAAgC,CAAhC,CAAD,CAAlB;AACA,UAAMC,GAAG,GAAGH,MAAM,CAACC,MAAM,CAACH,CAAC,CAACL,KAAF,CAAQ,OAAR,CAAD,CAAN,CAAyBS,KAAzB,CAA+B,CAA/B,CAAD,CAAlB;AACA,UAAME,IAAI,GAAGL,GAAG,GAAG,EAAN,GAAWI,GAAxB;;AACA,UAAIT,OAAO,KAAK,EAAhB,EAAoB;AAClBP,QAAAA,MAAM,CAACkB,IAAP,CAAY;AAAED,UAAAA,IAAI,EAAEA,IAAR;AAAcV,UAAAA,OAAO,EAAPA;AAAd,SAAZ;AACD;AACF;AACF;;AACD,SAAOP,MAAP;AACD","sourcesContent":["export default function lyricParser(lrc) {\n  return {\n    'lyric': parseLyric(lrc.lrc.lyric || ''),\n    'tlyric': parseLyric(lrc.tlyric.lyric || ''),\n    'lyricuser': lrc.lyricUser,\n    'transuser': lrc.transUser,\n  }\n}\n\nexport function parseLyric(lrc) {\n  const lyrics = lrc.split('\\n')\n  const lrcObj = []\n  for (let i = 0; i < lyrics.length; i++) {\n    const lyric = decodeURIComponent(lyrics[i])\n    const timeReg = /\\[\\d*:\\d*((\\.|:)\\d*)*\\]/g\n    const timeRegExpArr = lyric.match(timeReg)\n    if (!timeRegExpArr) continue\n    const content = lyric.replace(timeReg, '')\n    for (let k = 0, h = timeRegExpArr.length; k < h; k++) {\n      const t = timeRegExpArr[k]\n      const min = Number(String(t.match(/\\[\\d*/i)).slice(1))\n      const sec = Number(String(t.match(/:\\d*/i)).slice(1))\n      const time = min * 60 + sec\n      if (content !== '') {\n        lrcObj.push({ time: time, content })\n      }\n    }\n  }\n  return lrcObj\n}"]}]}