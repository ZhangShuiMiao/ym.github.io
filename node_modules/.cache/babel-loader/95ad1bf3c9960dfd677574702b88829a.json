{"remainingRequest":"/Users/zhangsir/Desktop/muise/node_modules/babel-loader/lib/index.js!/Users/zhangsir/Desktop/muise/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhangsir/Desktop/muise/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangsir/Desktop/muise/src/base/video-player.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhangsir/Desktop/muise/src/base/video-player.vue","mtime":1592641032488},{"path":"/Users/zhangsir/Desktop/muise/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/muise/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/muise/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangsir/Desktop/muise/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\nimport Player from \"xgplayer\";\nimport { toRem } from \"@/utils\";\nexport default {\n  name: \"VideoPlayer\",\n  props: [\"url\"],\n  mounted: function mounted() {\n    this.initPlayer();\n    this.transferRem();\n  },\n  methods: {\n    initPlayer: function initPlayer() {\n      if (!this.url) return;\n      this.player = new Player({\n        el: this.$refs.player,\n        url: this.url,\n        videoInit: true,\n        lang: \"zh-cn\",\n        width: \"100%\",\n        playbackRate: [0.5, 0.75, 1, 1.5, 2]\n      });\n    },\n    transferRem: function transferRem() {\n      var _this = this;\n\n      this.player.on(\"ready\", function () {\n        var videoWrapper = _this.$refs.player;\n        var height = videoWrapper.style.height;\n        var remHeight = toRem(Number(height.replace(\"px\", \"\")));\n        videoWrapper.style.height = remHeight;\n      });\n    }\n  },\n  watch: {\n    url: function url(_url, oldUrl) {\n      if (_url && _url !== oldUrl) {\n        if (!this.player) {\n          this.initPlayer();\n        } else {\n          this.player.src = _url;\n          this.player.reload();\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["video-player.vue"],"names":[],"mappings":";;;;;;;;;AAQA,OAAA,MAAA,MAAA,UAAA;AACA,SAAA,KAAA,QAAA,SAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,KAAA,EAAA,CAAA,KAAA,CAFA;AAGA,EAAA,OAHA,qBAGA;AACA,SAAA,UAAA;AACA,SAAA,WAAA;AACA,GANA;AAOA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,wBACA;AACA,UAAA,CAAA,KAAA,GAAA,EAAA;AACA,WAAA,MAAA,GAAA,IAAA,MAAA,CAAA;AACA,QAAA,EAAA,EAAA,KAAA,KAAA,CAAA,MADA;AAEA,QAAA,GAAA,EAAA,KAAA,GAFA;AAGA,QAAA,SAAA,EAAA,IAHA;AAIA,QAAA,IAAA,EAAA,OAJA;AAKA,QAAA,KAAA,EAAA,MALA;AAMA,QAAA,YAAA,EAAA,CAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA;AANA,OAAA,CAAA;AAQA,KAXA;AAYA,IAAA,WAZA,yBAYA;AAAA;;AACA,WAAA,MAAA,CAAA,EAAA,CAAA,OAAA,EAAA,YAAA;AACA,YAAA,YAAA,GAAA,KAAA,CAAA,KAAA,CAAA,MAAA;AACA,YAAA,MAAA,GAAA,YAAA,CAAA,KAAA,CAAA,MAAA;AACA,YAAA,SAAA,GAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,IAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AACA,QAAA,YAAA,CAAA,KAAA,CAAA,MAAA,GAAA,SAAA;AACA,OALA;AAMA;AAnBA,GAPA;AA4BA,EAAA,KAAA,EAAA;AACA,IAAA,GADA,eACA,IADA,EACA,MADA,EACA;AACA,UAAA,IAAA,IAAA,IAAA,KAAA,MAAA,EAAA;AACA,YAAA,CAAA,KAAA,MAAA,EAAA;AACA,eAAA,UAAA;AACA,SAFA,MAEA;AACA,eAAA,MAAA,CAAA,GAAA,GAAA,IAAA;AACA,eAAA,MAAA,CAAA,MAAA;AACA;AACA;AACA;AAVA;AA5BA,CAAA","sourcesContent":["<template>\n  <div\n    class=\"video-player\"\n    ref=\"player\"\n  ></div>\n</template>\n\n<script type=\"text/ecmascript-6\">\nimport Player from \"xgplayer\"\nimport { toRem } from \"@/utils\"\n\nexport default {\n  name: \"VideoPlayer\",\n  props: [\"url\"],\n  mounted() {\n    this.initPlayer()\n    this.transferRem()\n  },\n  methods: {\n    initPlayer() {\n      if (!this.url) return\n      this.player = new Player({\n        el: this.$refs.player,\n        url: this.url,\n        videoInit: true,\n        lang: \"zh-cn\",\n        width: \"100%\",\n        playbackRate: [0.5, 0.75, 1, 1.5, 2]\n      })\n    },\n    transferRem() {\n      this.player.on(\"ready\", () => {\n        const videoWrapper = this.$refs.player\n        const height = videoWrapper.style.height\n        const remHeight = toRem(Number(height.replace(\"px\", \"\")))\n        videoWrapper.style.height = remHeight\n      })\n    }\n  },\n  watch: {\n    url(url, oldUrl) {\n      if (url && url !== oldUrl) {\n        if (!this.player) {\n          this.initPlayer()\n        } else {\n          this.player.src = url\n          this.player.reload()\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.xgplayer-error {\n  display: none;\n}\n</style>"],"sourceRoot":"src/base"}]}